#!/usr/bin/perl

use strict;
use warnings;

use Data::Floid;
use File::Basename qw(basename dirname);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub fatal;
sub usage;

my $dbm = 'DB_File';
my @stdopt = (
    'c=s' => \$dbm,
);

usage if !@ARGV;
my $sub = __PACKAGE__->can('cmd_' . shift @ARGV) || usage;
$sub->();

sub cmd_mint {
    my $bulk;
    my $floid = init('rw', 1, 'b|bulk' => \$bulk);
    my $spec = shift @ARGV;
    if ($bulk) {
        while (<>) {
            chomp;
            my $id = $floid->mint(split / /, $_, 2);
            print $id, ' ', $_, "\n";
        }
    }
    else {
        my $anno = @ARGV ? shift(@ARGV) : undef;
        my $id = $floid->mint($spec, $anno);
        print $id, "\n";
    }
}

sub cmd_get {
    my ($null, $strict);
    my $floid = init('r', 1, 'n=s' => \$null, 's' => \$strict);
    my $id = shift @ARGV;
    my $val;
    eval {
        $val = $floid->get($id);
        if (defined $val) {
            print $val, "\n";
        }
        elsif (defined $null) {
            print $null;
        }
        elsif ($strict) {
            fatal "no value associated with ID: $id";
        }
        exit 0;
    };
    fatal "get failed: $@";
}

sub cmd_set {
    my $floid = init('rw', 2);
    usage if @ARGV % 2;
    eval {
        while (@ARGV) {
            my ($id, $val) = splice @ARGV, 0, 2;
            $floid->set($id, $val);
        }
        exit 0;
    };
    fatal "set failed: $@";
}

sub cmd_dump {
    my ($joiner, $onlykeys, $raw, $long, $null) = ("\t", 0, 0, undef);
    my $floid = init('r', 0,
        'r' => \$raw,
        'l' => sub { $long = $raw = 1 },
        'k' => \$onlykeys,
        'j=s' => \$joiner,
        'n=s' => \$null,
    );
    my $h = $floid->all($raw);
    while (my ($k, $v) = each %$h) {
        if ($onlykeys) {
            print $k, "\n";
        }
        elsif ($long) {
            print $k, ' ', length($v), "\n", $v, "\n";
        }
        elsif (defined $v) {
            print $k, $joiner, $v, "\n";
        }
        elsif (defined $null) {
            print $k, $joiner, $null, "\n";
        }
    }
}

sub cmd_seed {
    #@ usage: seed DB TMPL [SEED]
    my $floid = init('rw', 1);
    usage if @ARGV > 2;
    $floid->seed(@_);
}

sub cmd_init {
    #@ usage: init DB
    my $floid = init('rw', 0);
}

sub init {
    my ($mode, $minargs, @opt) = @_;
    GetOptions(@stdopt, @opt) or usage;
    my $path;
    if (defined $mode) {
        usage if !@ARGV;
        $path = shift @ARGV;
    }
    usage if @ARGV < $minargs;
    return Data::Floid->new(
        'dbm' => $dbm,
        'path' => $path,
        'mode' => $mode,
    ) if defined $path;
}

sub usage {
    print STDERR "usage: floidb CMD [OPTION]... [ARG]...\n";
    exit 1;
}

sub fatal {
    print STDERR 'floid: ', pop(), "\n";
    exit @_ ? shift() : 2;
}

